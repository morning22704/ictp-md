#!/usr/bin/perl -w
# generate new version header file

use strict;
use Socket;

my ($name,$date,$flags,$version,$host,$githash,$gitdate,$gitauthor);
$host  = `hostname -s`;
chomp $host;
$date  = localtime();

$githash   = `git log -n 1 --pretty="%H"`;
$gitdate   = `git log -n 1 --pretty="%aD"`;
$gitauthor = `git log -n 1 --pretty="%an <%ae>"`;
chomp $githash;
chomp $gitdate;
chomp $gitauthor;

die "usage: perl $0 <project name> <project version> <compile flags>\n"
  unless $#ARGV > 1;

$name = shift @ARGV;
$version = shift @ARGV;
$flags = join ' ', @ARGV;

open VER, "> new.version.f90"
  or die "Could not open temporary output file for writing: $!\n";

print VER <<EOF
!> Module to provide program version info.
!!
!! This module is autogenerated from a script in order
!! to contain various pieces of information that is only
!! available at compile time. These are the compilation 
!! data and the compiler flags, but also information about
!! the version and the last commit to the source code 
!! management system.
module header

contains

!> Print the program version banner
subroutine version
  use io, only : stdout,separator
  implicit none

  write (stdout,*) '=================='
  write (stdout,*) ' ${name} v${version} '
  write (stdout,*) '=================='
  write (stdout,*) separator
  write (stdout,*) 'Compile date : ${date} on ${host}'
  write (stdout,*) 'Compile flags: ${flags}'
  write (stdout,*) separator
  write (stdout,*) 'Last commit  : ${githash}'
  write (stdout,*) 'Commit date  : ${gitdate}'
  write (stdout,*) 'Commit author: ${gitauthor}'
  write (stdout,*) separator
end subroutine version
end module header
EOF
;

rename 'new.version.f90', 'version.f90';
